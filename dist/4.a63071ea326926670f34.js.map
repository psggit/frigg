{"version":3,"sources":["webpack:///./src/react-apps/home/components/geofence-check/check-result-card.js","webpack:///./src/react-apps/home/container/geo-fence-check.js"],"names":["__webpack_require__","_Card","CheckResultCard","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","colorMap","system fail","success","warning","state","toggled","toggleResultCard","bind","_react2","default","Component","setState","_props","props","status","checkName","dataList","data","split","filter","item","length","console","log","createElement","Card","onClick","style","padding","cursor","position","color","background","marginLeft","borderRadius","fontSize","textTransform","float","top","right","transform","_iconUtils2","map","i","key","_redux","_reactRedux","Actions","GeoFenceCheck","cityIdx","checkButtons","label","name","title","tooltipPosition","isDisabled","disabledButtons","handleClick","handleCheckAll","handleCityChange","actions","emptyGeoFenceCheckData","fetchCities","state_short_name","is_available","offset","limit","deliverable_city","no_filter","cityId","checkPrimeRetailer","checkDeliveryAgent","checkDeliveryAgentRetailer","checkActiveLocalityWithinCity","listRetailerOutsideLocality","checkCityFence","e","slice","push","currentTarget","k","citiesData","id","_this2","width","maxWidth","marginBottom","className","_SelectField2","value","parseInt","onChange","iconStyle","fill","loadingCities","_MenuItem2","primaryText","_RaisedButton2","primary","disabled","button","tooltip","tooltip-position","indexOf","marginRight","marginTop","geoFenceCheckData","result","_checkResultCard2","connect","main","dispatch","bindActionCreators"],"mappings":"8ZAAAA,EAAA,IACAC,EAAAD,EAAA,SACAA,EAAA,6DAEME,cACJ,SAAAA,iGAAcC,CAAAC,KAAAF,GAAA,IAAAG,mKAAAC,CAAAF,MAAAF,EAAAK,WAAAC,OAAAC,eAAAP,IAAAQ,KAAAN,OAAA,OAEZC,EAAKM,UACHC,cAAe,UACfC,QAAW,UACXC,QAAW,WAEbT,EAAKU,OACHC,SAAS,GAEXX,EAAKY,iBAAmBZ,EAAKY,iBAAiBC,KAAtBb,GAVZA,qUADcc,EAAAC,QAAMC,yDAehCjB,KAAKkB,UAAWN,SAAUZ,KAAKW,MAAMC,2CAG9B,IAAAO,EAC6BnB,KAAKoB,MAAjCC,EADDF,EACCE,OAAQC,EADTH,EACSG,UACZC,EAFGJ,EACoBK,KACPC,MAAM,MAI1B,OAFAF,EAAWA,EAASG,OAAO,SAAAC,GAAA,OAAQA,EAAKC,SACxCC,QAAQC,IAAIP,GAEVR,EAAAC,QAAAe,cAAAlC,EAAAmC,MACEC,QAASjC,KAAKa,iBACdqB,OACEC,QAAS,YACTC,OAAQ,YAGVrB,EAAAC,QAAAe,cAAA,OAAKG,OAASG,SAAU,aACtBtB,EAAAC,QAAAe,cAAA,SACEhB,EAAAC,QAAAe,cAAA,SAAKT,GACLP,EAAAC,QAAAe,cAAA,QAAMG,OACJI,MAAO,OACPC,WAAYvC,KAAKO,SAASc,GAC1Bc,QAAS,WACTK,WAAY,OACZC,aAAc,OACdC,SAAU,OACVC,cAAe,cAGbtB,IAIJE,EAASK,OAEPb,EAAAC,QAAAe,cAAA,QACEG,OACEU,MAAO,QACPP,SAAU,WACVQ,IAAK,MACLC,MAAO,MACPC,UAAW,sBAGX,EAAAC,EAAAhC,SAAQ,eAGZ,IAIJhB,KAAKW,MAAMC,SAAWW,EAASK,QAC/Bb,EAAAC,QAAAe,cAAA,OAAKG,OAASC,QAAS,WACrBpB,EAAAC,QAAAe,cAAA,UAEIR,EAAS0B,IAAI,SAACtB,EAAMuB,GAClB,OAAOnC,EAAAC,QAAAe,cAAA,MAAIoB,IAAKD,GAAKvB,2BAWxB7B,kVCvFfF,EAAA,QACAA,EAAA,UACAA,EAAA,MACAwD,EAAAxD,EAAA,KACAyD,EAAAzD,EAAA,SACAA,EAAA,MACAC,EAAAD,EAAA,SACAA,EAAA,MACY0D,0JAAZ1D,EAAA,yDACAA,EAAA,SAEM2D,cACJ,SAAAA,iGAAcxD,CAAAC,KAAAuD,GAAA,IAAAtD,mKAAAC,CAAAF,MAAAuD,EAAApD,WAAAC,OAAAC,eAAAkD,IAAAjD,KAAAN,OAAA,OAEZC,EAAKU,OACH6C,QAAS,GAEXvD,EAAKwD,eAEDC,MAAO,uBACPC,KAAM,cACNC,MAAO,yEACPC,gBAAiB,QAGjBH,MAAO,uBACPC,KAAM,WACNC,MAAO,wDACPC,gBAAiB,QAGjBH,MAAO,wBACPC,KAAM,wBACNC,MAAO,wEACPC,gBAAiB,QAGjBH,MAAO,gCACPC,KAAM,oBACNC,MAAO,wDACPC,gBAAiB,WAGjBH,MAAO,iCACPC,KAAM,wBACNC,MAAO,qEACPC,gBAAiB,WAGjBH,MAAO,mBACPC,KAAM,mBACNC,MAAO,0DACPC,gBAAiB,WAGrB5D,EAAKU,OACHmD,YAAY,EACZC,iBAAkB,EAAG,EAAG,EAAG,EAAG,EAAG,IAEnC9D,EAAK+D,YAAc/D,EAAK+D,YAAYlD,KAAjBb,GACnBA,EAAKgE,eAAiBhE,EAAKgE,eAAenD,KAApBb,GACtBA,EAAKiE,iBAAmBjE,EAAKiE,iBAAiBpD,KAAtBb,GAjDZA,qUADYc,EAAAC,QAAMC,0DAsD9BjB,KAAKoB,MAAM+C,QAAQC,yBACnBpE,KAAKoB,MAAM+C,QAAQE,aACjBC,iBAAkB,KAClBC,aAAc,KACdC,OAAQ,EACRC,MAAO,GACPC,iBAAkB,KAClBC,WAAW,6CAKb,IACQC,EAAW5E,KAAKW,MAAhBiE,OACR5E,KAAKkB,UAAW4C,YAAY,EAAMC,iBAFT,EAAG,EAAG,EAAG,EAAG,EAAG,KAIxC/D,KAAKoB,MAAM+C,QAAQU,oBAAqBD,WACxC5E,KAAKoB,MAAM+C,QAAQW,oBAAqBF,WACxC5E,KAAKoB,MAAM+C,QAAQY,4BAA6BH,WAChD5E,KAAKoB,MAAM+C,QAAQa,+BAAgCJ,WACnD5E,KAAKoB,MAAM+C,QAAQc,6BAA8BL,WACjD5E,KAAKoB,MAAM+C,QAAQe,gBAAiBN,+CAG1BO,EAAGjC,GAAG,IACR0B,EAAW5E,KAAKW,MAAhBiE,OACFb,EAAkB/D,KAAKW,MAAMoD,gBAAgBqB,QAGnD,OAFArB,EAAgBsB,KAAKnC,GACrBlD,KAAKkB,UAAW6C,kBAAiBD,YAAY,IACrCqB,EAAEG,cAAc3B,MACtB,IAAK,cACH3D,KAAKoB,MAAM+C,QAAQU,oBAAqBD,WACxC,MAEF,IAAK,WACH5E,KAAKoB,MAAM+C,QAAQW,oBAAqBF,WACxC,MAEF,IAAK,oBACH5E,KAAKoB,MAAM+C,QAAQY,4BAA6BH,WAChD,MAEF,IAAK,wBACH5E,KAAKoB,MAAM+C,QAAQa,+BAAgCJ,WACnD,MAEF,IAAK,wBACH5E,KAAKoB,MAAM+C,QAAQc,6BAA8BL,WACjD,MAEF,IAAK,mBACH5E,KAAKoB,MAAM+C,QAAQe,gBAAiBN,WACpC,MAEF,QACE,iDAIWO,EAAGI,GAClBvF,KAAKoB,MAAM+C,QAAQC,yBACnB,IAAMZ,EAAU+B,EAAI,EACZC,EAAexF,KAAKoB,MAApBoE,WACRxF,KAAKkB,UACHsC,UACAoB,OAAQY,EAAWD,GAAGE,GACtB3B,YAAY,EACZC,sDAIK,IAAA2B,EAAA1F,KACP,OACEe,EAAAC,QAAAe,cAAA,OAAKG,OAASyD,MAAO,OAAQC,SAAU,MACrC7E,EAAAC,QAAAe,cAAA,WACEhB,EAAAC,QAAAe,cAAAlC,EAAAmC,MACEE,OACEC,QAAS,mBACTwD,MAAO,MACPE,aAAc,SAGhB9E,EAAAC,QAAAe,cAAA,kCACAhB,EAAAC,QAAAe,cAAA,OAAK+D,UAAU,cACb/E,EAAAC,QAAAe,cAAAgE,EAAA/E,SACEkB,OAASyD,MAAO,QAChBK,MAAOC,SAASjG,KAAKW,MAAM6C,SAC3B0C,SAAUlG,KAAKkE,iBACfiC,WAAaC,KAAM,YAGhBpG,KAAKoB,MAAMiF,cAUV,GARArG,KAAKoB,MAAMoE,WAAWvC,IAAI,SAACtB,EAAMuB,GAAP,OACxBnC,EAAAC,QAAAe,cAAAuE,EAAAtF,SACEgF,MAAO9C,EAAI,EACXC,IAAKxB,EAAK8D,GACVc,YAAa5E,EAAKgC,aAWlC5C,EAAAC,QAAAe,cAAAyE,EAAAxF,SACEyF,SAAA,EACA/C,MAAM,YACNzB,QAASjC,KAAKiE,eACd/B,OAAS2D,aAAc,QACvBa,SAAU1G,KAAKW,MAAMmD,aAEvB/C,EAAAC,QAAAe,cAAA,WAEE/B,KAAKyD,aAAaR,IAAI,SAAC0D,EAAQzD,GAC7B,OACEnC,EAAAC,QAAAe,cAAAyE,EAAAxF,SACE4F,QAASD,EAAO/C,MAChBiD,mBAAkBF,EAAO9C,gBACzB4C,SAAA,EACAxE,QAAS,SAACkD,GAAQO,EAAK1B,YAAYmB,EAAGjC,IACtCQ,MAAOiD,EAAOjD,MACdgD,SAAUhB,EAAK/E,MAAMoD,gBAAgB+C,QAAQ5D,IAAM,EACnDS,KAAMgD,EAAOhD,KACbzB,OAAS6E,YAAa,OAAQlB,aAAc,YAKpD9E,EAAAC,QAAAe,cAAA,OAAKG,OAAS8E,UAAW,SAErBhH,KAAKoB,MAAM6F,kBAAkBhE,IAAI,SAACiE,EAAQhE,GACxC,OACEnC,EAAAC,QAAAe,cAAAoF,EAAAnG,SACEmC,IAAA,eAAoBD,EACpB1B,KAAM0F,EAAO1F,KACbF,UAAW4F,EAAOtD,MAClBvC,OAAQ6F,EAAO7F,iCAiBlB,EAAAgC,EAAA+D,SANS,SAAAzG,GAAA,OAASA,EAAM0G,MAEZ,SAAAC,GAAA,OACzBnD,SAAS,EAAAf,EAAAmE,oBAAmBjE,EAASgE,KAGxB,CAGb/D","file":"4.a63071ea326926670f34.js","sourcesContent":["import React from 'react'\nimport { Card } from 'material-ui/Card'\nimport getIcon from './../icon-utils'\n\nclass CheckResultCard extends React.Component {\n  constructor() {\n    super()\n    this.colorMap = {\n      'system fail': '#ff3b34',\n      'success': '#2fa72f',\n      'warning': '#FF9800'\n    }\n    this.state = {\n      toggled: false\n    }\n    this.toggleResultCard = this.toggleResultCard.bind(this)\n  }\n\n  toggleResultCard() {\n    this.setState({ toggled: !this.state.toggled })\n  }\n\n  render() {\n    const { status, checkName, data } = this.props\n    let dataList = data.split('\\n')\n\n    dataList = dataList.filter(item => item.length)\n    console.log(dataList);\n    return (\n      <Card\n        onClick={this.toggleResultCard}\n        style={{\n          padding: '20px 40px',\n          cursor: 'pointer'\n        }}\n      >\n        <div style={{ position: 'relative' }}>\n          <p>\n            <b>{ checkName }</b>\n            <span style={{\n              color: '#fff',\n              background: this.colorMap[status],\n              padding: '5px 20px',\n              marginLeft: '20px',\n              borderRadius: '29px',\n              fontSize: '12px',\n              textTransform: 'uppercase'\n            }}\n            >\n              { status }\n            </span>\n          </p>\n          {\n            dataList.length\n            ? (\n              <span\n                style={{\n                  float: 'right',\n                  position: 'absolute',\n                  top: '50%',\n                  right: '0px',\n                  transform: 'translateY(-50%)'\n                }}\n              >\n                { getIcon('down-arrow')}\n              </span>\n            )\n            : ''\n          }\n        </div>\n        {\n          this.state.toggled && dataList.length &&\n          <div style={{ padding: '10px 0' }}>\n            <ul>\n              {\n                dataList.map((item, i) => {\n                  return <li key={i}>{ item }</li>\n                })\n              }\n            </ul>\n          </div>\n        }\n      </Card>\n    )\n  }\n}\n\nexport default CheckResultCard\n","import React from 'react'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport CheckResultCard from './../components/geofence-check/check-result-card'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport SelectField from 'material-ui/SelectField'\nimport { Card } from 'material-ui/Card'\nimport MenuItem from 'material-ui/MenuItem'\nimport * as Actions from './../actions'\nimport '@sass/components/_tooltip.scss'\n\nclass GeoFenceCheck extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      cityIdx: 0\n    }\n    this.checkButtons = [\n      {\n        label: 'Check prime retailer',\n        name: 'check-prime',\n        title: 'Checks whether the active locality under the city has a prime retailer',\n        tooltipPosition: 'top'\n      },\n      {\n        label: 'Check delivery agent',\n        name: 'check-da',\n        title: 'Check whether the acive locality has a delivery agent',\n        tooltipPosition: 'top'\n      },\n      {\n        label: 'Check active locality',\n        name: 'check-active-locality',\n        title: 'Check whether all the active localities are within a deliverable city',\n        tooltipPosition: 'top'\n      },\n      {\n        label: 'Check delivery agent retailer',\n        name: 'check-da-retailer',\n        title: 'Check whether the prime retailer has a delivery agent',\n        tooltipPosition: 'bottom'\n      },\n      {\n        label: 'List retailer outside locality',\n        name: 'list-retailer-outside',\n        title: 'Check whether all retailer are within respective locality boundary',\n        tooltipPosition: 'bottom'\n      },\n      {\n        label: 'City fence check',\n        name: 'check-city-fence',\n        title: 'Checks whether city Gps value is within its geoboundary',\n        tooltipPosition: 'bottom'\n      }\n    ]\n    this.state = {\n      isDisabled: true,\n      disabledButtons: [0, 1, 2, 3, 4, 5 ]\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.handleCheckAll = this.handleCheckAll.bind(this)\n    this.handleCityChange = this.handleCityChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.props.actions.emptyGeoFenceCheckData()\n    this.props.actions.fetchCities({\n      state_short_name: null,\n      is_available: null,\n      offset: 0,\n      limit: 50,\n      deliverable_city: null,\n      no_filter: true\n    })\n  }\n\n  handleCheckAll() {\n    const disabledButtons = [0, 1, 2, 3, 4, 5]\n    const { cityId } = this.state\n    this.setState({ isDisabled: true, disabledButtons })\n\n    this.props.actions.checkPrimeRetailer({ cityId })\n    this.props.actions.checkDeliveryAgent({ cityId })\n    this.props.actions.checkDeliveryAgentRetailer({ cityId })\n    this.props.actions.checkActiveLocalityWithinCity({ cityId })\n    this.props.actions.listRetailerOutsideLocality({ cityId })\n    this.props.actions.checkCityFence({ cityId })\n  }\n\n  handleClick(e, i) {\n    const { cityId } = this.state\n    const disabledButtons = this.state.disabledButtons.slice()\n    disabledButtons.push(i)\n    this.setState({ disabledButtons, isDisabled: true })\n    switch (e.currentTarget.name) {\n      case 'check-prime':\n        this.props.actions.checkPrimeRetailer({ cityId })\n        break\n\n      case 'check-da':\n        this.props.actions.checkDeliveryAgent({ cityId })\n        break\n\n      case 'check-da-retailer':\n        this.props.actions.checkDeliveryAgentRetailer({ cityId })\n        break\n\n      case 'check-active-locality':\n        this.props.actions.checkActiveLocalityWithinCity({ cityId })\n        break\n\n      case 'list-retailer-outside':\n        this.props.actions.listRetailerOutsideLocality({ cityId })\n        break\n\n      case 'check-city-fence':\n        this.props.actions.checkCityFence({ cityId })\n        break\n\n      default:\n        return;\n    }\n  }\n\n  handleCityChange(e, k) {\n    this.props.actions.emptyGeoFenceCheckData()\n    const cityIdx = k + 1\n    const { citiesData } = this.props\n    this.setState({\n      cityIdx,\n      cityId: citiesData[k].id,\n      isDisabled: false,\n      disabledButtons: []\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ width: '100%', maxWidth: 900 }}>\n        <div>\n          <Card\n            style={{\n              padding: '10px 20px 0 20px',\n              width: '30%',\n              marginBottom: '40px'\n            }}\n          >\n            <h3>Choose city to check</h3>\n            <div className=\"form-group\">\n              <SelectField\n                style={{ width: '100%' }}\n                value={parseInt(this.state.cityIdx)}\n                onChange={this.handleCityChange}\n                iconStyle={{ fill: '#9b9b9b' }}\n              >\n                {\n                  !this.props.loadingCities\n                  ? (\n                    this.props.citiesData.map((item, i) => (\n                      <MenuItem\n                        value={i + 1}\n                        key={item.id}\n                        primaryText={item.name}\n                      />\n                    ))\n                  )\n                  : ''\n                }\n              </SelectField>\n            </div>\n          </Card>\n        </div>\n\n        <RaisedButton\n          primary\n          label=\"Check all\"\n          onClick={this.handleCheckAll}\n          style={{ marginBottom: '20px' }}\n          disabled={this.state.isDisabled}\n        />\n        <br />\n        {\n          this.checkButtons.map((button, i) => {\n            return (\n              <RaisedButton\n                tooltip={button.title}\n                tooltip-position={button.tooltipPosition}\n                primary\n                onClick={(e) => { this.handleClick(e, i) }}\n                label={button.label}\n                disabled={this.state.disabledButtons.indexOf(i) > -1}\n                name={button.name}\n                style={{ marginRight: '20px', marginBottom: '20px' }}\n              />\n            )\n          })\n        }\n        <div style={{ marginTop: '20px' }}>\n          {\n            this.props.geoFenceCheckData.map((result, i) => {\n              return (\n                <CheckResultCard\n                  key={`result-card-${i}`}\n                  data={result.data}\n                  checkName={result.title}\n                  status={result.status}\n                />\n              )\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => state.main\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(Actions, dispatch)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GeoFenceCheck)\n"],"sourceRoot":""}